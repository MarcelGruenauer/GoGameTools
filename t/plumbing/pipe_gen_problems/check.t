#!/usr/bin/env perl
use GoGameTools::features;
use GoGameTools::Parser::SGF;
use GoGameTools::Plumbing;
use GoGameTools::GenerateProblems::Viewer::Glift;
use GoGameTools::GenerateProblems::Plugin::Check;
use GoGameTools::GenerateProblems::Problem;
use GoGameTools::Util;
use GoGameTools::TagHandler;
use Test::More;
use Test::Differences;
register_tags();

# a tree as generated by status.t, simplified
my $tree = bless(
    {   metadata => {
            refs => [],
            tags => [ 'question', 'status', 'task' ]
        },
        tree => [
            bless(
                {   properties => {
                        CA => 'UTF-8',
                        C  => 'What is the status of this group??',
                        PL => 'B',
                        CR => ['jj'],
                        AW => [ 'ic', 'jc', 'nc', 'kc', 'nb', 'mc', 'hc', 'lc', 'fc', 'fb', 'gc' ],
                        GM => 1,
                        AB => [ 'kb', 'lb', 'jb', 'mb', 'hb', 'ib', 'gb' ],
                        SZ => 19,
                        MN => -1,
                        FF => 4
                    },
                    refs => [],
                    tags => [
                        bless(
                            {   name   => 'status',
                                _flags => {}
                            },
                            'GoGameTools::Tag'
                        )
                    ],
                    directives => {}
                },
                'GoGameTools::Node'
            ),
            bless(
                {   directives => { answer => 'Black can live. White can kill.' },
                    tags       => [],
                    refs       => [],
                    properties => { B => 'jj' }
                },
                'GoGameTools::Node'
            ),
            bless(
                {   properties => {
                        C  => 'Black can live. White can kill.',
                        AE => ['jj'],
                        GB => 1
                    },
                    directives => {},
                    refs       => [],
                    tags       => [
                        bless(
                            {   name   => 'question',
                                _flags => {}
                            },
                            'GoGameTools::Tag'
                        )
                    ]
                },
                'GoGameTools::Node'
            )
        ],
    },
    'GoGameTools::Tree'
);
check_ok($tree, [], 'valid tree: no errors');
$tree->metadata->{tags} = [
    qw(
      offensive_endgame defensive_endgame
      attacking defending
      living killing
      ddk1 lowsdk highdan
      )
];
check_ok(
    $tree,
    [   'conflicting tags: #attacking, #defending',
        'conflicting tags: #defensive_endgame, #offensive_endgame',
        'conflicting tags: #killing, #living',
        'conflicting tags: #ddk1, #highdan, #lowsdk',
    ],
    'conflicting tags'
);

sub check_ok ($tree, $expect, $name) {
    my @errors;
    GoGameTools::GenerateProblems::Plugin::Check->new->check_problem(
        problem  => GoGameTools::GenerateProblems::Problem->new(tree => $tree),
        on_error => sub ($message) { push @errors, $message }
    );
    eq_or_diff \@errors, $expect, $name;
}
done_testing;
