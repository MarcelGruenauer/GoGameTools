#!/usr/bin/env perl
use GoGameTools::features;
use GoGameTools::Util;
use GoGameTools::Log;
use GoGameTools::JSON;
use GoGameTools::GenerateProblems::Viewer::Glift;
my %opt        = get_options(expect_stdin => 1);
my $json       = do { local $/; <STDIN> };
my $collection = json_decode($json);
my @sgf        = map { $_->{sgf} } $collection->@*;
fatal('gogame-glift-problems: got no SGF data') unless @sgf;
my $html = <<'EODATA';
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf8" />
    <title></title>
    <style type="text/css">

#glift_display {
    width: 100%;
    min-width: 600px;
    height: 600px;
}

    </style>
</head>
<body>

<div id="glift_display"></div>

<script>
%GLIFT%

sgfdata = %DATA%;

glift.api.widgetopt[glift.WidgetType.STANDARD_PROBLEM].statusBarIcons = [
  'game-info',
  'fullscreen'
];

// only didplay the problem name in the game info window
glift.rules.Properties.prototype.getGameInfo = function () {
    var gameInfoArr = [];
    var propNameMap = {
      GN: 'Problem Name',
    };
    for (var key in propNameMap) {
      if (this.contains(key)) {
        var displayName = propNameMap[key];
        var obj = {
          prop: key,
          displayName: displayName,
          value: this.getOneValue(key)
        };
        gameInfoArr.push(obj);
      }
    }
    return gameInfoArr;
};

gliftWidget = glift.create({
  sgfCollection: sgfdata,
  sgfDefaults: {
    widgetType: 'STANDARD_PROBLEM',
    boardRegion: glift.enums.boardRegions.ALL,
    // accept on both GB[1] and GW[1]; GW[1] occurs if calors have been swapped
    problemConditions: { GB: "1", GW: "1" },
    keyMappings: {
      ARROW_LEFT: 'iconActions.arrowleft.click',
      ARROW_UP: 'iconActions.chevron-left.click',
      ARROW_DOWN: 'iconActions.chevron-right.click',
      '/': 'iconActions.undo-problem-move.click'
    }
  },
  divId: "glift_display",
  allowWrapAround: 1
});

</script>

</body>
</html>
EODATA
my %var = (
    DATA  => json_encode(\@sgf),
    GLIFT => GoGameTools::GenerateProblems::Viewer::Glift->new->glift_js,
);
say $html =~ s/%([A-Z]+)%/$var{$1}/ger;

=pod

=head1 NAME

gogame-glift-problems - open a web page for testing problems with Glift

=head1 SYNOPSIS

    $ ls *.sgf | gogame-gen-problems --gb | jq '[.[] | .sgf]' | gogame-glift-problems
    $ gogame-glift-problems --man

=head1 DESCRIPTION

Takes SGJ on STDIN and creates HTML that uses Glift to test these problems. The
HTML is printed to STDOUT.

The following command-line options are supported:

=over 4

=item C<--help>, C<-h>

Prints the synopsis.

=item C<--man>

Prints the whole documentation.

=item C<--version>

Prints the program version.

=back

