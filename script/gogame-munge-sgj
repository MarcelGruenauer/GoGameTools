#!/usr/bin/env perl
use GoGameTools::features;
use GoGameTools::Util;
use GoGameTools::JSON;
use Path::Tiny;
my %opt = get_options(
    expect_stdin => 1,
    extra_opts => [qw(delete-private-refs|p delete-secret-problems|s basedir|d=s)],
);
my $json = do { local $/; <STDIN> };
say json_encode(munge_refs(json_decode($json)));

sub munge_refs ($objects_ref) {
    my @new_objects;
  OBJECT: for my $obj ($objects_ref->@*) {

        # if a basedir is given, make the filename relative to that dir. It's
        # less cluttered and more private.
        if (defined $opt{basedir}) {
            $obj->{metadata}{filename} =
              path($obj->{metadata}{filename})->relative($opt{basedir}) . '';
        }
        my @new_refs;
        my $refs = $obj->{metadata}{refs} //= [];
        for ($refs->@*) {

            # 1) problems we might want to omit completely
            next OBJECT if $opt{'delete-secret-problems'} && substr($_, 0, 2) eq 's/';

            # 2) refs we might want to omit
            next if $opt{'delete-private-refs'} && substr($_, 0, 2) eq 'p/';

            # 3) default: take the ref
            push @new_refs, $_;

            # 4) refs we might want to add
            if (m!^notcher/code/(\d)\d\d/[WSN]{2}$!) {
                push @new_refs, 'tsumego/real/side/notcher', "notcher/length/$1";
            }
        }
        $refs->@* = @new_refs;
        push @new_objects, $obj;
    }
    return \@new_objects;
}

=pod

=item C<--delete-private-refs>

Takes the SGJ of generated problems and removes private refs - that is, those
starting with C<p/>, then prints the resulting SGJ. When this is piped to the
site generator, it will not include menu items that depend on those private
refs.

=cut
