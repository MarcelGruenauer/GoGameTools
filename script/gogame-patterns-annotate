#!/usr/bin/env python

import getopt, sys, re
import kombilo as lk
from kombilo.kombiloNG import *
from warnings import warn

patterns = []

def add_pattern(annotation, patternTypes, patternStr):
    if not isinstance(patternTypes, list): patternTypes = [ patternTypes ]
    lines = list(filter(None, re.split('[\s\n]*', patternStr)))
    x = len(lines[0])
    y = len(lines)
    for t in patternTypes:
        patterns.append({
            'pattern': Pattern(
                patternStr,
                ptype = t,
                sizeX = x,
                sizeY = y,
                contsinpattern = 'X'),
            'annotation': annotation
        })

# 'dent' can be on the first or second line
add_pattern('#dent', SIDE_N_PATTERN,
    '''
    .1.
    X.X
    OOO
    ''')
add_pattern('#dent', [ SIDE_N_PATTERN, CORNER_NW_PATTERN ],
    '''
    *...*
    o.1.o
    *X.X*
    ''')

add_pattern('#cat_face', CENTER_PATTERN,
    '''
    *...*
    *...*
    *.1.*
    .X.X.
    *...*
    ''')

add_pattern('#dog_face', CENTER_PATTERN,
    '''
    *...*
    *...*
    *.1.*
    .....
    .X.X.
    *...*
    ''')

add_pattern('#horse_face', CENTER_PATTERN,
    '''
    *...*
    *...*
    *.1.*
    .....
    .....
    .X.X.
    *...*
    ''')

add_pattern('#dragon_face', CENTER_PATTERN,
    '''
    *...*
    *...*
    *.1.*
    .....
    .....
    .....
    .X.X.
    *...*
    ''')

add_pattern('#crosscut', [ CENTER_PATTERN, SIDE_N_PATTERN ],
    '''
    *..*
    .XO.
    .OX.
    *..*
    ''')

add_pattern('#throwing_in', [ CENTER_PATTERN, SIDE_N_PATTERN, CORNER_NE_PATTERN ],
    '''
    xOo
    O1O
    o.o
    ''')

# the first column is to prevent '1' from capturing the first-line 'O' stone
add_pattern('#throwing_in', [ SIDE_N_PATTERN, CORNER_NE_PATTERN ],
    '''
    oO1.
    *XOO
    ''')

add_pattern('#throwing_in', SIDE_N_PATTERN,
    '''
    ..o
    O1O
    *O*
    ''')

add_pattern('#nose_attachment', [ CENTER_PATTERN, SIDE_N_PATTERN, CORNER_NE_PATTERN ],
    '''
    *..o
    OO1.
    *..o
    ''')

# nose attachment on the first line
add_pattern('#nose_attachment', [ SIDE_E_PATTERN, CORNER_NE_PATTERN ],
    '''
    *..
    OO1
    *..
    ''')

add_pattern('#trumpet_connection', CENTER_PATTERN,
    '''
    X.1
    OX.
    *OX
    ''')

add_pattern('#capturing_two_for_two_eyes', CENTER_PATTERN,
    '''
    **X*
    *XOX
    XO1O
    *XO*
    ''')

add_pattern('#cranes_nest', CENTER_PATTERN,
    '''
    ..O..
    X.1.X
    XOOOX
    OXXXO
    ''')

add_pattern('#belly_attachment', [ CENTER_PATTERN, SIDE_N_PATTERN, CORNER_NE_PATTERN ],
    '''
    ...*
    XO1.
    XO.o
    *X**
    ''')

add_pattern('#three_is_one', [ SIDE_N_PATTERN, CORNER_NE_PATTERN ],
    '''
    XOOO1
    *XXXO
    ''')

add_pattern('#cave', [ SIDE_N_PATTERN, CORNER_NW_PATTERN ],
    '''
    ...X
    .1O.
    *OXX
    ''')

add_pattern('#carpenters_connection', [ SIDE_N_PATTERN, CORNER_NW_PATTERN ],
    '''
    .1.X
    ...o
    .XO*
    ''')

add_pattern('#table_attachment', CENTER_PATTERN,
    '''
    *.XXO
    *..O.
    .X.1.
    *...*
    ''')

add_pattern('#elephant_eye', CENTER_PATTERN,
    '''
    *o***
    oO...
    ..1..
    ...Oo
    ***o*
    ''')

add_pattern('#net', CENTER_PATTERN,
    '''
    OXX
    XO.
    X.1
    ''')
add_pattern('#net', CENTER_PATTERN,
    '''
    OXXX
    XOo.
    X..1
    ''')

add_pattern('#making_a_false_eye', [ CENTER_PATTERN, SIDE_N_PATTERN ],
    '''
    O.1
    O..
    XOO
    ''')

add_pattern('#elbow_lock', [ CENTER_PATTERN, SIDE_N_PATTERN ],
    '''
    O.OX
    O1OX
    XO.X
    *XX*
    ''')

add_pattern('#elbow_lock', [ CENTER_PATTERN, SIDE_N_PATTERN ],
    '''
    O.OX
    O1OX
    .OXX
    XX**
    ''')

add_pattern('#elbow_lock', CORNER_NW_PATTERN,
    '''
    O.O
    O1O
    .OX
    XX*
    ''')

add_pattern('#windmill', CENTER_PATTERN,
    '''
    ..X.
    OOX.
    .XOO
    .1..
    ''')

add_pattern('#attach_and_extend', CENTER_PATTERN,
    '''
    ..2.
    .31O
    ....
    ..X.
    o...
    ''')

add_pattern('#attach_and_crosscut', [ CENTER_PATTERN, SIDE_E_PATTERN, SIDE_N_PATTERN ],
    '''
    **.*
    oO3.
    .12.
    *..*
    ''')

add_pattern('#jumping_over_wall', CENTER_PATTERN,
    '''
    *....
    .1...
    O..O.
    OXXO.
    ...XO
    ''')

add_pattern('#shoulder_hit', SIDE_N_PATTERN,
    '''
    ......
    ......
    ..O..o
    ...1..
    ......
    ......
    '''
),

add_pattern('#pushing_twice_then_keima', CENTER_PATTERN,
    '''
    .5...
    ...4.
    ..32.
    ..1O.
    ..X..
    ''')

add_pattern('#parallel_bars', [ SIDE_N_PATTERN, CORNER_NW_PATTERN ],
    '''
    .1.X
    OXOx
    ''')

add_pattern('#breaking_the_wing', SIDE_N_PATTERN,
    '''
    ..1.o
    ..O.*
    **X**
    ''')

add_pattern('#breaking_the_wing', CORNER_NE_PATTERN,
    '''
    .1.
    .O.
    *X.
    ''')

# hane at the head of two
add_pattern('#hane_at_the_head', CENTER_PATTERN,
    '''
    ...
    .1.
    .OX
    .OX
    ..*
    ''')
# hane at the head of three
add_pattern('#hane_at_the_head', CENTER_PATTERN,
    '''
    ...
    .1.
    .OX
    .OX
    .OX
    ..*
    ''')

add_pattern('#bumping', CENTER_PATTERN,
    '''
    .o.
    oOo
    .1.
    oXo
    ''')

add_pattern('#monkey_jump', [ SIDE_N_PATTERN, CORNER_NW_PATTERN, CORNER_NE_PATTERN ],
    '''
    .1...
    ....X
    ooOO*
    ''')

add_pattern('#flying_double_clamp', SIDE_N_PATTERN,
    '''
    .1O3.
    *2..*
    **XX*
    ''')
add_pattern('#flying_double_clamp', CENTER_PATTERN,
    '''
    .....
    .1O3.
    *2..*
    **XX*
    ''')

add_pattern('#double_knights_connection', SIDE_N_PATTERN,
    '''
    .....
    ..1..
    X....
    XOOXX
    ''')

add_pattern('#double_hane_edge_squeeze', SIDE_N_PATTERN,
    '''
    ....
    1OOX
    .XOX
    ..XO
    ''')

add_pattern('#counteratari', CENTER_PATTERN,
    '''
    .O..
    OXO1
    ..X.
    ''')

# another kind of counter-atari
add_pattern('#counteratari', [ CENTER_PATTERN, SIDE_N_PATTERN ],
    '''
    *..
    x1.
    XO.
    OX.
    *O*
    ''')

add_pattern('#double_atari', CENTER_PATTERN,
    '''
    *xX*
    xXO.
    XO1.
    *..*
    ''')

# narabi on the first to fourth lines. Define it like this because it should be
# stones along the side, not towards the center or edge.
add_pattern('#lining_up', SIDE_N_PATTERN,
    '''
    .X1.
    *..*
    ''')
add_pattern('#lining_up', SIDE_N_PATTERN,
    '''
    ....
    .X1.
    *..*
    ''')
add_pattern('#lining_up', SIDE_N_PATTERN,
    '''
    ....
    ....
    .X1.
    *..*
    ''')
add_pattern('#lining_up', SIDE_N_PATTERN,
    '''
    ....
    ....
    ....
    .X1.
    *..*
    ''')

add_pattern('#crossing_the_lair', CENTER_PATTERN,
    '''
    OXXXO
    X.O.X
    *.1.*
    *OOO*
    ''')

# last column is to ensure that 1 is not a simple atari on one stone. But it
# can still be an atari on multiple stones...
add_pattern('#angle_wedge', CENTER_PATTERN,
    '''
    .O.*
    .1Oo
    ..X*
    ''')

add_pattern('#knights_net', CENTER_PATTERN,
    '''
    *....
    X..1.
    .O...
    XOX..
    OX..*
    ''')
add_pattern('#knights_net', CENTER_PATTERN,
    '''
    *.....
    .X..1.
    X.O...
    XOOX..
    OXX..*
    ''')

add_pattern('#preventing_bamboo', CENTER_PATTERN,
    '''
    ....
    .O1.
    X...
    XOOX
    OXX*
    ''')

add_pattern('#clamp', CENTER_PATTERN,
    '''
    *.*
    .1.
    .O.
    *X*
    ''')
add_pattern('#clamp', [ SIDE_N_PATTERN, SIDE_W_PATTERN, CORNER_NW_PATTERN ],
    '''
    *.*
    .1.
    .O.
    *X*
    ''')

add_pattern('#wedge', [ CENTER_PATTERN, SIDE_N_PATTERN, CORNER_NE_PATTERN ],
    '''
    o..
    O1O
    o..
    ''')

# The first column is to avoid a simple atari.
add_pattern('#bend_wedge', CENTER_PATTERN,
    '''
    *X..
    oO1O
    *...
    ''')

add_pattern('#braid', [ CENTER_PATTERN, SIDE_N_PATTERN ],
    '''
    ...
    OXO
    1OX
    ...
    ''')

# The first line, '**o', is to prevent 'OOX' from being recognized, where '1'
# would be a simple cut.
add_pattern('#across_attach', [ CENTER_PATTERN, SIDE_N_PATTERN ],
    '''
    **o
    .1O
    O..
    ..X
    ''')

add_pattern('#first_line_empty_triangle', [ SIDE_N_PATTERN, CORNER_NE_PATTERN ],
    '''
    .1.
    XX*
    ''')

add_pattern('#first_line_empty_triangle', [ CORNER_NE_PATTERN ],
    '''
    .1.
    *XX
    ''')

add_pattern('#first_line_descent', [ SIDE_N_PATTERN, CORNER_NE_PATTERN ],
    '''
    .1.
    oXo
    ''')

add_pattern('#nobikiri', [ CENTER_PATTERN, SIDE_N_PATTERN ],
    '''
    *...o
    ..X1.
    xXO.o
    **O.*
    ''')

add_pattern('#forcing_into_farmers_hat', CENTER_PATTERN,
    '''
    .1..
    XO.O
    .XO.
    ''')

# the last line ensures that White's connection is bad shape
add_pattern('#forcing_into_farmers_hat', CENTER_PATTERN,
    '''
    .X.
    XO1
    O.O
    O..
    ''')

# the first line ensures that we don't match a tiger's mouth
add_pattern('#diagonal_attachment', CENTER_PATTERN,
    '''
    *o*
    ..X
    O1.
    ...
    ''')

# diagonal attachment on the first line
add_pattern('#diagonal_attachment', SIDE_N_PATTERN,
    '''
    O1.
    O.X
    ''')

# a "dog leg" is a diagonal on the first line not in contact with other stones
add_pattern('#dogleg', SIDE_N_PATTERN,
    '''
    .1.
    *.X
    ''')

add_pattern('#tigers_mouth', CENTER_PATTERN,
    '''
    *o.*
    .1.X
    *.Xo
    ''')

add_pattern('#tigers_mouth', CENTER_PATTERN,
    '''
    *o.*
    .X.X
    *.1o
    ''')

def get_data_structured(gamelist, i):
    db, game = gamelist.getIndex(i)
    if db == -1:
        return

    ID, pos = gamelist.DBlist[db]['data'].get_currentList_entry(game)
    d = gamelist.DBlist[db]['data'][pos]
    treepathsStr = uu(gamelist.DBlist[db]['data'].get_resultsStr(pos))
    # Only take actual tree paths, no trailing dashes or continuation labels.
    # Use set() to dedup.
    treepaths = list(set(filter(None, re.findall('\d+(?:-\d+)*',treepathsStr))))

    GL_FILENAME = 0
    GL_PATH = 7
    GL_POS = 8

    data = {
        'filename' : os.path.join(d[GL_PATH], d[GL_FILENAME]) + '.sgf',
        'pos' : d[GL_POS],
        'treepaths' : treepaths
    }
    return data

def deleteDBfiles(dir):
    basepath = os.path.join(dir, 'kombilo')
    if os.path.exists(basepath + '.db'):
        for ext in ['db', 'da', 'db1', 'db2', ]:
            candidate = basepath + '.%s' % ext
            try:
                os.remove(candidate)
            except:
                pass

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "d:f:", ["dir=", "filter="])
    except getopt.GetoptError as err:
        print str(err)
        sys.exit(2)
    dir = None
    filter = None
    for o, a in opts:
        if o in ("-d", "--dir"):
            dir = a
        elif o in ("-f", "--filter"):
            filter = a
        else:
            assert False, "unhandled option"
    if not dir:
        print 'Specify a directory with -d/--dir.'
        sys.exit()
    deleteDBfiles(dir)
    K = KEngine()
    K.addDB(dir)
    # if you have existing DB files, you can load the games with:
    # K.gamelist.DBlist.append({'sgfpath': '', 'name':(dir, 'kombilo'), 'data': None, 'disabled': 0})
    K.loadDBs()

    for db in K.gamelist.DBlist:
        # use the default format from kombiloNG.py and just append '[[post]]';
        # other code seems to need the previous fields
        db['data'].resetFormat('', '[[filename.]],,,[[id]],,,[[PB]],,,[[PW]],,,[[winner]],,,signaturexxx,,,[[date]],,,[[path]],,,[[pos]]')

    for p in patterns:
        if filter is not None:
            if p['annotation'] != filter and p['annotation'] != '#' + filter: continue
        K.gamelist.reset()
        K.patternSearch(p['pattern'], lk.SearchOptions(0,0))
        for i in range(K.gamelist.noOfGames()):
            data = get_data_structured(K.gamelist, i)
            for treepath in data['treepaths']:
                print '%s\t%s\t%s\t%s' % (
                    data['filename'],
                    data['pos'],
                    treepath,
                    p['annotation'])
    deleteDBfiles(dir)

if __name__ == '__main__':
    main()
