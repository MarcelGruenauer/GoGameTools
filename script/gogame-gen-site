#!/usr/bin/env perl
use GoGameTools::features;
use GoGameTools::Log;
use GoGameTools::Parser::FilterQuery;
use GoGameTools::Plumbing;
use GoGameTools::Porcelain::SiteGenData;
use GoGameTools::Porcelain::SiteMungeSGJ;
use GoGameTools::Porcelain::SiteWrite;
use GoGameTools::TagHandler;
use GoGameTools::Util;
use GoGameTools::Porcelain::GenerateProblems;
use Path::Tiny;
use Digest::SHA qw(sha1_hex);
use Storable qw(store retrieve);
my %opt = get_options(
    expect_stdin => 1,
    extra_opts   => [
        qw(
          basedir=s
          cachedir=s
          delete-metadata
          delete-private-refs
          delete-secret-problems
          filter=s
          nopermalinks
          set=s@
          site-dir|d=s
          viewer=s
          www-dir=s
          zip=s
          )
    ],
    required => [qw(viewer www-dir)]
);
my $viewer_class = load_viewer_class($opt{viewer});

# If the cache dir is defined, use a viewer-specific subdirectory, because WGo
# expects different markup (GW[], GB[]) than EasyGo ("RIGHT").
my $cache_dir;
if (defined $opt{cachedir}) {
    $cache_dir = path($opt{cachedir})->child($opt{viewer});
}
my ($pipe_filter, $pipe_write);
if (defined $opt{filter}) {
    my $expr = parse_filter_query($opt{filter})
      or fatal("can't parse query $opt{filter}");
    $pipe_filter = sub ($collection) {
        return [ grep { eval_query(expr => $expr, vars => query_vars_from_sgj($_)) }
              $collection->@* ];
    };
}

# If --www-dir is used, generate the web site. If --zip is used, generate the
# zip file for EasyGo.
if (defined $opt{'www-dir'}) {
    $pipe_write = GoGameTools::Porcelain::SiteWrite->new(
        delete_metadata => $opt{'delete-metadata'},
        site_dir        => $opt{'site-dir'},
        viewer_delegate => $viewer_class->new,
        www_dir         => $opt{'www-dir'},
    )->run;
} elsif (defined $opt{zip}) {
    $pipe_write = GoGameTools::Porcelain::EasyGoWrite->new(zip => $opt{zip})->run;
} else {
    fatal("use either ---www-dir or --zip");
}

# process problem set options
my @sets;
for my $set_dir ($opt{set}->@*) {
    $set_dir = path($set_dir);
    my %spec;
    my $iterator =
      $set_dir->child('sgf')->iterator({ recurse => 1, follow_symlinks => 1 });
    while (my $path = $iterator->()) {
        push $spec{files}->@*, $path->stringify if $path->is_file && $path =~ /\.sgf$/;
    }
    my $menu = $set_dir->child('menu.json');
    $spec{menu} = $menu->stringify if $menu->is_file;
    push @sets, \%spec;
}
register_tags();
run_pipe(
    pipe_file_list_to_sgj([ map { $_->{files}->@* } @sets ]),
    pipe_sgj_to_problem_trees_cached(
        cache_dir     => $cache_dir,
        on_cache_miss => sub ($sgj) {
            my @result = run_pipe(
                pipe_sgj_to_trees(),
                pipe_convert_markup_to_directives(),
                pipe_convert_directives_from_comment(),
                GoGameTools::Porcelain::GenerateProblems->new(
                    viewer_delegate => $viewer_class->new
                )->run,
                [ [$sgj] ],
            );
            return $result[0];
        },
    ),
    pipe_trees_to_sgj(),

    # munge the SGJ collection
    GoGameTools::Porcelain::SiteMungeSGJ->new(
        basedir                => $opt{basedir},
        delete_private_refs    => $opt{'delete-private-refs'},
        delete_secret_problems => $opt{'delete-secret-problems'},
    )->run,

    # possibly filter
    (defined $opt{filter} ? $pipe_filter : ()),

    # generate the site data
    GoGameTools::Porcelain::SiteGenData->new(
        menu          => [ map { $_->{menu} } @sets ],
        no_permalinks => $opt{nopermalinks},
    )->run,
    $pipe_write,
);

# Takes a list of filenames that contain SGF collections. Returns a SGJ
# collection by splitting up the SGF using simple balanced parentheses
# matching.
sub pipe_file_list_to_sgj ($file_list) {
    return sub {
        my @sgj;
        for my $file ($file_list->@*) {
            my $abs_path       = absolute_path($file);
            my $sgf_collection = slurp($file);
            my @sgf            = grep { defined && length }
              map { s/(^\s+|\s+$)//gsr } split '(?=\(;GM\[1\])', $sgf_collection;
            while (my ($index, $sgf) = each @sgf) {
                push @sgj,
                  { sgf      => $sgf,
                    metadata => {
                        input_filename => $file,
                        filename       => $abs_path,
                        index          => $index,
                    },
                  };
            }
        }
        return \@sgj;
    };
}

sub pipe_sgj_to_problem_trees_cached (%args) {
    my $cache_dir = delete $args{cache_dir};
    return sub ($collection) {
        my @result;
        for my $sgj ($collection->@*) {

            # determine the cache file that corresponds to this tree
            my $cache_file;
            if (defined $cache_dir) {

                # There can be many thousands of trees, so split the files into
                # two levels by the first two hex digits; e.g., 01/01234567.
                my $id      = utf8_sha1_hex($sgj->{sgf});
                my $sub_dir = $cache_dir->child(substr($id, 0, 2));
                $sub_dir->mkpath;
                $cache_file = $sub_dir->child("$id.storable")->stringify;
            }

            # use the cache if possible
            if (defined($cache_file) and -e $cache_file) {
                my @problem_trees = retrieve($cache_file)->@*;
                push @result, @problem_trees;
                next;
            }

            # still here, so either no cache_dir or there was no cached file
            my $problem_trees = $args{on_cache_miss}->($sgj);
            push @result, $problem_trees->@*;

            # write to the cache
            store($problem_trees, $cache_file) if defined $cache_file;
        }
        return \@result;
    };
}
